name: Build and test

on: [push, pull_request]

jobs:
  win64:
    name: Build & Test Win64
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          default: true
          override: true

      # Extract all files from installer
      - name: Install SQLite drivers
        run: |
         Invoke-WebRequest http://www.ch-werner.de/sqliteodbc/sqliteodbc_w64.exe -OutFile C:\sqliteodbc.exe
         7z x C:\sqliteodbc.exe -o"C:\Program Files\SQLite ODBC Driver for Win64"
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" /v "SQLite3 ODBC Driver" /t REG_SZ /d Installed /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "Driver" /t REG_SZ /d "C:\Program Files\SQLite ODBC Driver for Win64\sqlite3odbc.dll" /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "Setup" /t REG_SZ /d "C:\Program Files\SQLite ODBC Driver for Win64\sqlite3odbc.dll" /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "UsageCount" /t REG_DWORD /d 1

      # Databases need to be run independently because docker on win64 doesn't support
      # linux containers
      - name: Run Microsoft SQL Server
        uses: potatoqualitee/mssqlsuite@v1
        with:
          install: sqlengine, sqlclient
          sa-password: My@Test@Password1
          show-log: true

      - name: Setup driver expectations
        run: cp odbcsv/tests/list-drivers-windows.txt odbcsv/tests/list-drivers.txt

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - name: Rust build cache
        uses: Swatinem/rust-cache@v2

      - name: Test
        run: |
          cargo test --release -- --skip postgresql --skip maria_db
          cargo test --features narrow --release -- --skip postgresql --skip maria_db

  win32:
    name: Build Win32
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install unixODBC
        run: brew install unixodbc

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: i686-pc-windows-msvc
          default: true
          override: true

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - name: Rust build cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release

  osx:
    name: Build OS-X
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true

      - name: Build
        run: cargo build --release

  linux:
    name: Build & Test Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build test container
        run: docker-compose --file docker-compose-ci.yml build test_linux

      - name: Test
        run: docker-compose --file docker-compose-ci.yml run test_linux

  odbc_3_5:
    name: Check build with ODBC 3.5
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cd ..
          cargo new test-compilation
          cd test-compilation
          cargo add odbc-api --path ../odbc-api/odbc-api --no-default-features --features odbc_version_3_5
          cargo build 
